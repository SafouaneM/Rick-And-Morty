{"ast":null,"code":"/**\n * --------------------------------------------------------------------------\n * Bootstrap (v4.5.3): button.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\nimport $ from 'jquery';\n/**\n * ------------------------------------------------------------------------\n * Constants\n * ------------------------------------------------------------------------\n */\n\nconst NAME = 'button';\nconst VERSION = '4.5.3';\nconst DATA_KEY = 'bs.button';\nconst EVENT_KEY = `.${DATA_KEY}`;\nconst DATA_API_KEY = '.data-api';\nconst JQUERY_NO_CONFLICT = $.fn[NAME];\nconst CLASS_NAME_ACTIVE = 'active';\nconst CLASS_NAME_BUTTON = 'btn';\nconst CLASS_NAME_FOCUS = 'focus';\nconst SELECTOR_DATA_TOGGLE_CARROT = '[data-toggle^=\"button\"]';\nconst SELECTOR_DATA_TOGGLES = '[data-toggle=\"buttons\"]';\nconst SELECTOR_DATA_TOGGLE = '[data-toggle=\"button\"]';\nconst SELECTOR_DATA_TOGGLES_BUTTONS = '[data-toggle=\"buttons\"] .btn';\nconst SELECTOR_INPUT = 'input:not([type=\"hidden\"])';\nconst SELECTOR_ACTIVE = '.active';\nconst SELECTOR_BUTTON = '.btn';\nconst EVENT_CLICK_DATA_API = `click${EVENT_KEY}${DATA_API_KEY}`;\nconst EVENT_FOCUS_BLUR_DATA_API = `focus${EVENT_KEY}${DATA_API_KEY} ` + `blur${EVENT_KEY}${DATA_API_KEY}`;\nconst EVENT_LOAD_DATA_API = `load${EVENT_KEY}${DATA_API_KEY}`;\n/**\n * ------------------------------------------------------------------------\n * Class Definition\n * ------------------------------------------------------------------------\n */\n\nclass Button {\n  constructor(element) {\n    this._element = element;\n    this.shouldAvoidTriggerChange = false;\n  } // Getters\n\n\n  static get VERSION() {\n    return VERSION;\n  } // Public\n\n\n  toggle() {\n    let triggerChangeEvent = true;\n    let addAriaPressed = true;\n    const rootElement = $(this._element).closest(SELECTOR_DATA_TOGGLES)[0];\n\n    if (rootElement) {\n      const input = this._element.querySelector(SELECTOR_INPUT);\n\n      if (input) {\n        if (input.type === 'radio') {\n          if (input.checked && this._element.classList.contains(CLASS_NAME_ACTIVE)) {\n            triggerChangeEvent = false;\n          } else {\n            const activeElement = rootElement.querySelector(SELECTOR_ACTIVE);\n\n            if (activeElement) {\n              $(activeElement).removeClass(CLASS_NAME_ACTIVE);\n            }\n          }\n        }\n\n        if (triggerChangeEvent) {\n          // if it's not a radio button or checkbox don't add a pointless/invalid checked property to the input\n          if (input.type === 'checkbox' || input.type === 'radio') {\n            input.checked = !this._element.classList.contains(CLASS_NAME_ACTIVE);\n          }\n\n          if (!this.shouldAvoidTriggerChange) {\n            $(input).trigger('change');\n          }\n        }\n\n        input.focus();\n        addAriaPressed = false;\n      }\n    }\n\n    if (!(this._element.hasAttribute('disabled') || this._element.classList.contains('disabled'))) {\n      if (addAriaPressed) {\n        this._element.setAttribute('aria-pressed', !this._element.classList.contains(CLASS_NAME_ACTIVE));\n      }\n\n      if (triggerChangeEvent) {\n        $(this._element).toggleClass(CLASS_NAME_ACTIVE);\n      }\n    }\n  }\n\n  dispose() {\n    $.removeData(this._element, DATA_KEY);\n    this._element = null;\n  } // Static\n\n\n  static _jQueryInterface(config, avoidTriggerChange) {\n    return this.each(function () {\n      const $element = $(this);\n      let data = $element.data(DATA_KEY);\n\n      if (!data) {\n        data = new Button(this);\n        $element.data(DATA_KEY, data);\n      }\n\n      data.shouldAvoidTriggerChange = avoidTriggerChange;\n\n      if (config === 'toggle') {\n        data[config]();\n      }\n    });\n  }\n\n}\n/**\n * ------------------------------------------------------------------------\n * Data Api implementation\n * ------------------------------------------------------------------------\n */\n\n\n$(document).on(EVENT_CLICK_DATA_API, SELECTOR_DATA_TOGGLE_CARROT, event => {\n  let button = event.target;\n  const initialButton = button;\n\n  if (!$(button).hasClass(CLASS_NAME_BUTTON)) {\n    button = $(button).closest(SELECTOR_BUTTON)[0];\n  }\n\n  if (!button || button.hasAttribute('disabled') || button.classList.contains('disabled')) {\n    event.preventDefault(); // work around Firefox bug #1540995\n  } else {\n    const inputBtn = button.querySelector(SELECTOR_INPUT);\n\n    if (inputBtn && (inputBtn.hasAttribute('disabled') || inputBtn.classList.contains('disabled'))) {\n      event.preventDefault(); // work around Firefox bug #1540995\n\n      return;\n    }\n\n    if (initialButton.tagName === 'INPUT' || button.tagName !== 'LABEL') {\n      Button._jQueryInterface.call($(button), 'toggle', initialButton.tagName === 'INPUT');\n    }\n  }\n}).on(EVENT_FOCUS_BLUR_DATA_API, SELECTOR_DATA_TOGGLE_CARROT, event => {\n  const button = $(event.target).closest(SELECTOR_BUTTON)[0];\n  $(button).toggleClass(CLASS_NAME_FOCUS, /^focus(in)?$/.test(event.type));\n});\n$(window).on(EVENT_LOAD_DATA_API, () => {\n  // ensure correct active class is set to match the controls' actual values/states\n  // find all checkboxes/readio buttons inside data-toggle groups\n  let buttons = [].slice.call(document.querySelectorAll(SELECTOR_DATA_TOGGLES_BUTTONS));\n\n  for (let i = 0, len = buttons.length; i < len; i++) {\n    const button = buttons[i];\n    const input = button.querySelector(SELECTOR_INPUT);\n\n    if (input.checked || input.hasAttribute('checked')) {\n      button.classList.add(CLASS_NAME_ACTIVE);\n    } else {\n      button.classList.remove(CLASS_NAME_ACTIVE);\n    }\n  } // find all button toggles\n\n\n  buttons = [].slice.call(document.querySelectorAll(SELECTOR_DATA_TOGGLE));\n\n  for (let i = 0, len = buttons.length; i < len; i++) {\n    const button = buttons[i];\n\n    if (button.getAttribute('aria-pressed') === 'true') {\n      button.classList.add(CLASS_NAME_ACTIVE);\n    } else {\n      button.classList.remove(CLASS_NAME_ACTIVE);\n    }\n  }\n});\n/**\n * ------------------------------------------------------------------------\n * jQuery\n * ------------------------------------------------------------------------\n */\n\n$.fn[NAME] = Button._jQueryInterface;\n$.fn[NAME].Constructor = Button;\n\n$.fn[NAME].noConflict = () => {\n  $.fn[NAME] = JQUERY_NO_CONFLICT;\n  return Button._jQueryInterface;\n};\n\nexport default Button;","map":{"version":3,"sources":["/Users/safouane/Documents/code/rick-morty-api/node_modules/bootstrap/js/src/button.js"],"names":["$","NAME","VERSION","DATA_KEY","EVENT_KEY","DATA_API_KEY","JQUERY_NO_CONFLICT","fn","CLASS_NAME_ACTIVE","CLASS_NAME_BUTTON","CLASS_NAME_FOCUS","SELECTOR_DATA_TOGGLE_CARROT","SELECTOR_DATA_TOGGLES","SELECTOR_DATA_TOGGLE","SELECTOR_DATA_TOGGLES_BUTTONS","SELECTOR_INPUT","SELECTOR_ACTIVE","SELECTOR_BUTTON","EVENT_CLICK_DATA_API","EVENT_FOCUS_BLUR_DATA_API","EVENT_LOAD_DATA_API","Button","constructor","element","_element","shouldAvoidTriggerChange","toggle","triggerChangeEvent","addAriaPressed","rootElement","closest","input","querySelector","type","checked","classList","contains","activeElement","removeClass","trigger","focus","hasAttribute","setAttribute","toggleClass","dispose","removeData","_jQueryInterface","config","avoidTriggerChange","each","$element","data","document","on","event","button","target","initialButton","hasClass","preventDefault","inputBtn","tagName","call","test","window","buttons","slice","querySelectorAll","i","len","length","add","remove","getAttribute","Constructor","noConflict"],"mappings":"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","sourcesContent":["/**\n * --------------------------------------------------------------------------\n * Bootstrap (v4.5.3): button.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nimport $ from 'jquery'\n\n/**\n * ------------------------------------------------------------------------\n * Constants\n * ------------------------------------------------------------------------\n */\n\nconst NAME = 'button'\nconst VERSION = '4.5.3'\nconst DATA_KEY = 'bs.button'\nconst EVENT_KEY = `.${DATA_KEY}`\nconst DATA_API_KEY = '.data-api'\nconst JQUERY_NO_CONFLICT = $.fn[NAME]\n\nconst CLASS_NAME_ACTIVE = 'active'\nconst CLASS_NAME_BUTTON = 'btn'\nconst CLASS_NAME_FOCUS = 'focus'\n\nconst SELECTOR_DATA_TOGGLE_CARROT = '[data-toggle^=\"button\"]'\nconst SELECTOR_DATA_TOGGLES = '[data-toggle=\"buttons\"]'\nconst SELECTOR_DATA_TOGGLE = '[data-toggle=\"button\"]'\nconst SELECTOR_DATA_TOGGLES_BUTTONS = '[data-toggle=\"buttons\"] .btn'\nconst SELECTOR_INPUT = 'input:not([type=\"hidden\"])'\nconst SELECTOR_ACTIVE = '.active'\nconst SELECTOR_BUTTON = '.btn'\n\nconst EVENT_CLICK_DATA_API = `click${EVENT_KEY}${DATA_API_KEY}`\nconst EVENT_FOCUS_BLUR_DATA_API = `focus${EVENT_KEY}${DATA_API_KEY} ` +\n                          `blur${EVENT_KEY}${DATA_API_KEY}`\nconst EVENT_LOAD_DATA_API = `load${EVENT_KEY}${DATA_API_KEY}`\n\n/**\n * ------------------------------------------------------------------------\n * Class Definition\n * ------------------------------------------------------------------------\n */\n\nclass Button {\n  constructor(element) {\n    this._element = element\n    this.shouldAvoidTriggerChange = false\n  }\n\n  // Getters\n\n  static get VERSION() {\n    return VERSION\n  }\n\n  // Public\n\n  toggle() {\n    let triggerChangeEvent = true\n    let addAriaPressed = true\n    const rootElement = $(this._element).closest(SELECTOR_DATA_TOGGLES)[0]\n\n    if (rootElement) {\n      const input = this._element.querySelector(SELECTOR_INPUT)\n\n      if (input) {\n        if (input.type === 'radio') {\n          if (input.checked && this._element.classList.contains(CLASS_NAME_ACTIVE)) {\n            triggerChangeEvent = false\n          } else {\n            const activeElement = rootElement.querySelector(SELECTOR_ACTIVE)\n\n            if (activeElement) {\n              $(activeElement).removeClass(CLASS_NAME_ACTIVE)\n            }\n          }\n        }\n\n        if (triggerChangeEvent) {\n          // if it's not a radio button or checkbox don't add a pointless/invalid checked property to the input\n          if (input.type === 'checkbox' || input.type === 'radio') {\n            input.checked = !this._element.classList.contains(CLASS_NAME_ACTIVE)\n          }\n\n          if (!this.shouldAvoidTriggerChange) {\n            $(input).trigger('change')\n          }\n        }\n\n        input.focus()\n        addAriaPressed = false\n      }\n    }\n\n    if (!(this._element.hasAttribute('disabled') || this._element.classList.contains('disabled'))) {\n      if (addAriaPressed) {\n        this._element.setAttribute('aria-pressed', !this._element.classList.contains(CLASS_NAME_ACTIVE))\n      }\n\n      if (triggerChangeEvent) {\n        $(this._element).toggleClass(CLASS_NAME_ACTIVE)\n      }\n    }\n  }\n\n  dispose() {\n    $.removeData(this._element, DATA_KEY)\n    this._element = null\n  }\n\n  // Static\n\n  static _jQueryInterface(config, avoidTriggerChange) {\n    return this.each(function () {\n      const $element = $(this)\n      let data = $element.data(DATA_KEY)\n\n      if (!data) {\n        data = new Button(this)\n        $element.data(DATA_KEY, data)\n      }\n\n      data.shouldAvoidTriggerChange = avoidTriggerChange\n\n      if (config === 'toggle') {\n        data[config]()\n      }\n    })\n  }\n}\n\n/**\n * ------------------------------------------------------------------------\n * Data Api implementation\n * ------------------------------------------------------------------------\n */\n\n$(document)\n  .on(EVENT_CLICK_DATA_API, SELECTOR_DATA_TOGGLE_CARROT, event => {\n    let button = event.target\n    const initialButton = button\n\n    if (!$(button).hasClass(CLASS_NAME_BUTTON)) {\n      button = $(button).closest(SELECTOR_BUTTON)[0]\n    }\n\n    if (!button || button.hasAttribute('disabled') || button.classList.contains('disabled')) {\n      event.preventDefault() // work around Firefox bug #1540995\n    } else {\n      const inputBtn = button.querySelector(SELECTOR_INPUT)\n\n      if (inputBtn && (inputBtn.hasAttribute('disabled') || inputBtn.classList.contains('disabled'))) {\n        event.preventDefault() // work around Firefox bug #1540995\n        return\n      }\n\n      if (initialButton.tagName === 'INPUT' || button.tagName !== 'LABEL') {\n        Button._jQueryInterface.call($(button), 'toggle', initialButton.tagName === 'INPUT')\n      }\n    }\n  })\n  .on(EVENT_FOCUS_BLUR_DATA_API, SELECTOR_DATA_TOGGLE_CARROT, event => {\n    const button = $(event.target).closest(SELECTOR_BUTTON)[0]\n    $(button).toggleClass(CLASS_NAME_FOCUS, /^focus(in)?$/.test(event.type))\n  })\n\n$(window).on(EVENT_LOAD_DATA_API, () => {\n  // ensure correct active class is set to match the controls' actual values/states\n\n  // find all checkboxes/readio buttons inside data-toggle groups\n  let buttons = [].slice.call(document.querySelectorAll(SELECTOR_DATA_TOGGLES_BUTTONS))\n  for (let i = 0, len = buttons.length; i < len; i++) {\n    const button = buttons[i]\n    const input = button.querySelector(SELECTOR_INPUT)\n    if (input.checked || input.hasAttribute('checked')) {\n      button.classList.add(CLASS_NAME_ACTIVE)\n    } else {\n      button.classList.remove(CLASS_NAME_ACTIVE)\n    }\n  }\n\n  // find all button toggles\n  buttons = [].slice.call(document.querySelectorAll(SELECTOR_DATA_TOGGLE))\n  for (let i = 0, len = buttons.length; i < len; i++) {\n    const button = buttons[i]\n    if (button.getAttribute('aria-pressed') === 'true') {\n      button.classList.add(CLASS_NAME_ACTIVE)\n    } else {\n      button.classList.remove(CLASS_NAME_ACTIVE)\n    }\n  }\n})\n\n/**\n * ------------------------------------------------------------------------\n * jQuery\n * ------------------------------------------------------------------------\n */\n\n$.fn[NAME] = Button._jQueryInterface\n$.fn[NAME].Constructor = Button\n$.fn[NAME].noConflict = () => {\n  $.fn[NAME] = JQUERY_NO_CONFLICT\n  return Button._jQueryInterface\n}\n\nexport default Button\n"]},"metadata":{},"sourceType":"module"}